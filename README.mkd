Installation
============

To install, simply go to the downloaded directory and type.

    python setup.py install

You may need to use root privileges (sudo) to use the above command, if your
current user does not have access to the python installation directory.

This will install the `psycopg2` and `Twisted` packages as well. If you need
to install these manually, the easiest method is using the following command.

    easy_install psycopg2 Twisted

Similar to the first command, this may require root (sudo) privileges.

Alternatively one can write scripts where the directory `NCARFlightMonitor` is
in the same folder as the script.


Basic Usage
===========

The most simple script that can be created is as follows.

    #!/usr/bin/env python
    # encoding: utf-8
    from NCARFlightMonitor.watch import NWatcher

    watch_server = NWatcher(database="GV") ## default to using eol-rt-data.guest.ucar.edu for SQL server
    watch_server.startWatching()

This will simply listen for when the GV is in the air, spit out messages about
missing data values when in flight, and write an ASCII file to the user's
temporary directory containing the data from the flight in the same format as
the ASCII files created by Aeros.

Using `NWatcher(database="GV", email_fn=some_function` will use a user defied
function with format `some_function(flight_info={}, files=[], body_msg="")`
to email the file after each flight. More information on how to contract a
compatible email function can be found in the package documentation.

A complete list of initialization parameters and their use can be found in the package documentation.


Adding custom data monitoring functions
---------------------------------------

The NWatcher class is designed to be easily augmented with data processing functions that provide more detailed status messages about the data being collected during a flight. To provide an explanation of how this works let's walk through the following example.

    #!/usr/bin/env python
    # encoding: utf-8
    from NCARFlightMonitor.watch import NWatcher

    ## Function Definitions
    def setup_co(self):
        ## All variables starting with `self` are persistant across process
        ## function runs and can be called in the process function. This can
        ## be useful for running averages and the like.
        self.cal = False

    def process_co(self, tm, data):
        coraw_al = data[0]

        if coraw_al <= 8000 and self.cal == False:
            self.log.print_msg("CO cal occuring.", tm)
            self.cal = True
        ## Reset so that the log message does not appear thousands of times.
        elif coraw_al > 8000 and self.cal == True:
            self.cal = False

    ## Main
    watch_server = NWatcher(database="GV")

    watch_server.attachAlgo(variables=('coraw_al',),
                            start_fn=functions.setup_co,
                            process_fn=functions.process_co,
                            description="CO raw cal checker")

    watch_server.startWatching()


Sample Flights
==============

All sample flight ASCII files are in the `samples/` directory.


- `HIPPO-5-rf02-2011_08_11-21_49_04.asc`: HIPPO 5 Research Flight 02 on the
  GV. Provides a sample where nothing has occurred abnormally (such as GPS
  going out, losing satcom, etc).

- `HIPPO-5-rf05-2011_08_20-03_34_52.asc`: HIPPO 5 Research Flight 05 on the
  GV. This flight was over the arctic, and hence satcom was lost for the
  magority of the flight (in one chunk).

- `HIPPO-5-rf05-rf06-combined.asc`: HIPPO 5 Research Flights 05 and 06 on the
  GV, with the times on 06 reduced by two days to make wait times inbetween
  flights when in simulation mode shorter. This provides an opportunity to
  test the entire package in a continuous monitoring setting ('daemon' mode)
  across multiple flights.

- `HIPPO-5-rf06-2011_08_24-01_09_09.asc`: HIPPO 5 Research Flight 06 on the
  GV. In this case, the TASX flight speed variable is unavailable for a period
  of time. This provides an example of calculating flight speed from GPS.

- `ICE-T-rf12-2011_07_30-19_38_00.asc`: ICE-T Research Flight 12 on the C130.
  This has a different instrumentation set.


Example Scripts
===============

All example programs are in the `examples/` directory.


- `cli_monitor.py`: Watches for when a plane takes off, records data
  from the flight, and watches for data integrity.
- `bot.py`: A chatbot that is identical to `live_watch.py` but outputs
  to a IRC server as well as the command line.
